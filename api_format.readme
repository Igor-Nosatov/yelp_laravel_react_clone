/**
 * Get a list of users.
 *
 * @return \Illuminate\Http\Response
 */
public function index()
{
    $users = User::all();

    return response()->json([
        'status' => 'success',
        'data' => $users,
        'message' => 'Users retrieved successfully'
    ], Response::HTTP_OK);
}

/**
 * Get a specific user by ID.
 *
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function show($id)
{
    $user = User::find($id);

    if (!$user) {
        return response()->json([
            'status' => 'error',
            'message' => 'User not found'
        ], Response::HTTP_NOT_FOUND);
    }

    return response()->json([
        'status' => 'success',
        'data' => $user,
        'message' => 'User retrieved successfully'
    ], Response::HTTP_OK);
}

/**
 * Create a new user.
 *
 * @param  \Illuminate\Http\Request  $request
 * @return \Illuminate\Http\Response
 */
public function store(Request $request)
{
    $validator = Validator::make($request->all(), [
        'name' => 'required',
        'email' => 'required|email|unique:users',
        'password' => 'required|min:6',
    ]);

    if ($validator->fails()) {
        return response()->json([
            'status' => 'error',
            'message' => 'Validation error',
            'errors' => $validator->errors()
        ], Response::HTTP_BAD_REQUEST);
    }

    $user = User::create($request->all());

    return response()->json([
        'status' => 'success',
        'data' => $user,
        'message' => 'User created successfully'
    ], Response::HTTP_CREATED);
}

/**
 * Update an existing user.
 *
 * @param  \Illuminate\Http\Request  $request
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function update(Request $request, $id)
{
    $validator = Validator::make($request->all(), [
        'name' => 'required',
        'email' => 'required|email|unique:users,email,' . $id,
        'password' => 'required|min:6',
    ]);

    if ($validator->fails()) {
        return response()->json([
            'status' => 'error',
            'message' => 'Validation error',
            'errors' => $validator->errors()
        ], Response::HTTP_BAD_REQUEST);
    }

    $user = User::find($id);

    if (!$user) {
        return response()->json([
            'status' => 'error',
            'message' => 'User not found'
        ], Response::HTTP_NOT_FOUND);
    }

    $user->update($request->all());

    return response()->json([
        'status' => 'success',
        'data' => $user,
        'message' => 'User updated successfully'
    ], Response::HTTP_OK);
}

/**
 * Delete a user.
 *
 * @param  int  $id
 * @return \Illuminate\Http\Response
 */
public function destroy($id)
{
    $user = User::find($id);

    if (!$user) {
        return response()->json([
            'status' => 'error',
            'message' => 'User not found'
        ], Response::HTTP_NOT_FOUND);
    }

    $user->delete();

    return response()->json([
        'status' => 'success',
        'message
